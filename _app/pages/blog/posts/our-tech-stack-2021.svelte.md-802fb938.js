import{S as e,i as a,s as r,B as t,j as o,m as n,o as s,p as i,q as l,x as h,u as c,v as f,W as p,e as u,t as d,k as v,c as m,a as y,g as w,d as g,n as k,b as S,f as b,F as E}from"../../../chunks/vendor-17dca76f.js";import{B as A}from"../../../chunks/BlogLayout-eca0b3b4.js";import"../../../chunks/routes-c138df12.js";import"../../../chunks/stores-4c1aac46.js";function T(e){let a,r,t,o,n,s,i,l,h,c,f,p,A,T,P,x,G,R,N,I,L,$,q,Q,B,O,W,J,j,F,D,K,M,V,H,z,C,U,Z,X,Y,_,ee,ae,re,te,oe,ne,se,ie,le,he,ce,fe,pe,ue,de,ve,me,ye,we,ge,ke,Se,be,Ee,Ae,Te,Pe,xe,Ge,Re,Ne,Ie,Le,$e,qe,Qe,Be,Oe,We,Je,je,Fe,De,Ke,Me,Ve,He,ze,Ce,Ue,Ze,Xe,Ye,_e,ea,aa,ra,ta,oa,na,sa,ia,la,ha,ca,fa,pa,ua,da,va,ma,ya;return{c(){a=u("p"),r=u("strong"),t=d("TL;DR:"),o=d(" This year, we are trying "),n=u("strong"),s=d("Apollo GraphQL"),i=d(" on the Backend, and "),l=u("strong"),h=d("Svelte Kit"),c=d(" on the Frontend,\nboth with "),f=u("strong"),p=d("Typescript"),A=d("."),T=v(),P=u("p"),x=d("Want to know how it’s working out for us? Read on!"),G=v(),R=u("p"),N=u("strong"),I=d("Note:"),L=d(" If you’re more into REST APIs, our tech stack last year achieved that very efficiently with Python’s "),$=u("strong"),q=d("FastAPI"),Q=d(".\nSee our "),B=u("a"),O=d("article here"),W=v(),J=u("h2"),j=d("Backend: GraphQL + Apollo Server"),F=u("a"),D=u("span"),K=v(),M=u("p"),V=d("In our quest to find a faster way to build Backend APIs, we came across\n"),H=u("a"),z=d("Apollo GraphQL"),C=d("."),U=v(),Z=u("p"),X=u("a"),Y=d("GraphQL"),_=d(" is great because it allows you to build your APIs in a schema-first manner.\nThis allows you to describe all of your data models (and their relationships) in one place,\nwhich is great for backend and frontend developers alike as it provides a clear and concise reference\nof all the data your API will expose."),ee=v(),ae=u("p"),re=d("Additionally, GraphQL allows you to "),te=u("strong"),oe=d("organize your data in a way that makes sense to you"),ne=d(",\nrather than trying to shoe-horn it into your database."),se=v(),ie=u("p"),le=d("GraphQL also "),he=u("strong"),ce=d("works very well with the type system of Typescript"),fe=d(", improving developer\nexperience with tools like auto-completion, auto-documentation, and type-checkers,\nhelping to catch bugs and design errors early."),pe=v(),ue=u("p"),de=u("a"),ve=d("Apollo Server"),me=d("\nis great too, because it provides a developer-efficient way of implementing resolvers.\nResolvers are the actual functions that take in a GraphQL query and return the appropriate data.\nApollo allows you to organize your resolvers in a modular way. It then figures out relationships\nin your schema, "),ye=u("strong"),we=d("implements the boring boilerplate resolvers for you"),ge=d(" and lets you implement the few complex\none, all while making it super easy to test them."),ke=v(),Se=u("p"),be=d("Similarly to a REST API backend, the bulk of your GraphQL implementation will be in your resolvers,\nwhich makes Apollo Server feel like a breath of fresh air."),Ee=v(),Ae=u("h2"),Te=d("Frontend: SvelteKit"),Pe=u("a"),xe=u("span"),Ge=v(),Re=u("p"),Ne=d("Nuxt.JS from "),Ie=u("a"),Le=d("our stack last year"),$e=d(" was great, but we wanted something faster to iterate."),qe=v(),Qe=u("p"),Be=d("We are eagerly "),Oe=u("a"),We=d("waiting for Nuxt 3 to come out"),Je=d(",\nas it would leverage the many improvements of Vue 3, like the improved\nsupport for Typescript. Unfortunately, at the time of writing (July 2021), it’s not even in Beta yet."),je=v(),Fe=u("p"),De=d("After researching and trying different alternatives, we found "),Ke=u("a"),Me=d("SvelteKit"),Ve=d(",\nwhich is a framework around "),He=u("a"),ze=d("Svelte"),Ce=d("."),Ue=v(),Ze=u("p"),Xe=d("The promise of Svelte is to provide the developer with an experience to the likes of reactive frameworks like\nVue and React, but instead of relying on a virtual DOM like its counterpart, "),Ye=u("strong"),_e=d("Svelte applies diffing algorithms\ndirectly on the Browser’s DOM"),ea=d(", using vanilla JS and human-readable HTML and CSS."),aa=v(),ra=u("p"),ta=d("While the speed improvements are noticeable sometimes and appreciable, they were not our main\nconcern as Nuxt, and more particularly Vue was already quite efficient. But Svelte conquered us\nthrough its very elegant design, requiring code that more closely resembles native JS,\nwhich means less documentation to read, less edge cases, and simpler developer onboarding."),oa=v(),na=u("h2"),sa=d("What’s next"),ia=u("a"),la=u("span"),ha=v(),ca=u("p"),fa=d("We’re lucky to have many projects to try many different technologies, and\nso far this year, this is what we have decided to go with. We’ll keep this article updated\nas we get more familiar with the technologies."),pa=v(),ua=u("p"),da=d("In the meantime, you can find out more about our "),va=u("a"),ma=d("2020 Tech Stack"),ya=d(", which focuses on REST APIs\nand uses Nuxt.JS on the frontend."),this.h()},l(e){a=m(e,"P",{});var u=y(a);r=m(u,"STRONG",{});var d=y(r);t=w(d,"TL;DR:"),d.forEach(g),o=w(u," This year, we are trying "),n=m(u,"STRONG",{});var v=y(n);s=w(v,"Apollo GraphQL"),v.forEach(g),i=w(u," on the Backend, and "),l=m(u,"STRONG",{});var S=y(l);h=w(S,"Svelte Kit"),S.forEach(g),c=w(u," on the Frontend,\nboth with "),f=m(u,"STRONG",{});var b=y(f);p=w(b,"Typescript"),b.forEach(g),A=w(u,"."),u.forEach(g),T=k(e),P=m(e,"P",{});var E=y(P);x=w(E,"Want to know how it’s working out for us? Read on!"),E.forEach(g),G=k(e),R=m(e,"P",{});var wa=y(R);N=m(wa,"STRONG",{});var ga=y(N);I=w(ga,"Note:"),ga.forEach(g),L=w(wa," If you’re more into REST APIs, our tech stack last year achieved that very efficiently with Python’s "),$=m(wa,"STRONG",{});var ka=y($);q=w(ka,"FastAPI"),ka.forEach(g),Q=w(wa,".\nSee our "),B=m(wa,"A",{href:!0});var Sa=y(B);O=w(Sa,"article here"),Sa.forEach(g),wa.forEach(g),W=k(e),J=m(e,"H2",{id:!0});var ba=y(J);j=w(ba,"Backend: GraphQL + Apollo Server"),F=m(ba,"A",{href:!0});var Ea=y(F);D=m(Ea,"SPAN",{class:!0}),y(D).forEach(g),Ea.forEach(g),ba.forEach(g),K=k(e),M=m(e,"P",{});var Aa=y(M);V=w(Aa,"In our quest to find a faster way to build Backend APIs, we came across\n"),H=m(Aa,"A",{href:!0,rel:!0});var Ta=y(H);z=w(Ta,"Apollo GraphQL"),Ta.forEach(g),C=w(Aa,"."),Aa.forEach(g),U=k(e),Z=m(e,"P",{});var Pa=y(Z);X=m(Pa,"A",{href:!0,rel:!0});var xa=y(X);Y=w(xa,"GraphQL"),xa.forEach(g),_=w(Pa," is great because it allows you to build your APIs in a schema-first manner.\nThis allows you to describe all of your data models (and their relationships) in one place,\nwhich is great for backend and frontend developers alike as it provides a clear and concise reference\nof all the data your API will expose."),Pa.forEach(g),ee=k(e),ae=m(e,"P",{});var Ga=y(ae);re=w(Ga,"Additionally, GraphQL allows you to "),te=m(Ga,"STRONG",{});var Ra=y(te);oe=w(Ra,"organize your data in a way that makes sense to you"),Ra.forEach(g),ne=w(Ga,",\nrather than trying to shoe-horn it into your database."),Ga.forEach(g),se=k(e),ie=m(e,"P",{});var Na=y(ie);le=w(Na,"GraphQL also "),he=m(Na,"STRONG",{});var Ia=y(he);ce=w(Ia,"works very well with the type system of Typescript"),Ia.forEach(g),fe=w(Na,", improving developer\nexperience with tools like auto-completion, auto-documentation, and type-checkers,\nhelping to catch bugs and design errors early."),Na.forEach(g),pe=k(e),ue=m(e,"P",{});var La=y(ue);de=m(La,"A",{href:!0,rel:!0});var $a=y(de);ve=w($a,"Apollo Server"),$a.forEach(g),me=w(La,"\nis great too, because it provides a developer-efficient way of implementing resolvers.\nResolvers are the actual functions that take in a GraphQL query and return the appropriate data.\nApollo allows you to organize your resolvers in a modular way. It then figures out relationships\nin your schema, "),ye=m(La,"STRONG",{});var qa=y(ye);we=w(qa,"implements the boring boilerplate resolvers for you"),qa.forEach(g),ge=w(La," and lets you implement the few complex\none, all while making it super easy to test them."),La.forEach(g),ke=k(e),Se=m(e,"P",{});var Qa=y(Se);be=w(Qa,"Similarly to a REST API backend, the bulk of your GraphQL implementation will be in your resolvers,\nwhich makes Apollo Server feel like a breath of fresh air."),Qa.forEach(g),Ee=k(e),Ae=m(e,"H2",{id:!0});var Ba=y(Ae);Te=w(Ba,"Frontend: SvelteKit"),Pe=m(Ba,"A",{href:!0});var Oa=y(Pe);xe=m(Oa,"SPAN",{class:!0}),y(xe).forEach(g),Oa.forEach(g),Ba.forEach(g),Ge=k(e),Re=m(e,"P",{});var Wa=y(Re);Ne=w(Wa,"Nuxt.JS from "),Ie=m(Wa,"A",{href:!0});var Ja=y(Ie);Le=w(Ja,"our stack last year"),Ja.forEach(g),$e=w(Wa," was great, but we wanted something faster to iterate."),Wa.forEach(g),qe=k(e),Qe=m(e,"P",{});var ja=y(Qe);Be=w(ja,"We are eagerly "),Oe=m(ja,"A",{href:!0,rel:!0});var Fa=y(Oe);We=w(Fa,"waiting for Nuxt 3 to come out"),Fa.forEach(g),Je=w(ja,",\nas it would leverage the many improvements of Vue 3, like the improved\nsupport for Typescript. Unfortunately, at the time of writing (July 2021), it’s not even in Beta yet."),ja.forEach(g),je=k(e),Fe=m(e,"P",{});var Da=y(Fe);De=w(Da,"After researching and trying different alternatives, we found "),Ke=m(Da,"A",{href:!0,rel:!0});var Ka=y(Ke);Me=w(Ka,"SvelteKit"),Ka.forEach(g),Ve=w(Da,",\nwhich is a framework around "),He=m(Da,"A",{href:!0,rel:!0});var Ma=y(He);ze=w(Ma,"Svelte"),Ma.forEach(g),Ce=w(Da,"."),Da.forEach(g),Ue=k(e),Ze=m(e,"P",{});var Va=y(Ze);Xe=w(Va,"The promise of Svelte is to provide the developer with an experience to the likes of reactive frameworks like\nVue and React, but instead of relying on a virtual DOM like its counterpart, "),Ye=m(Va,"STRONG",{});var Ha=y(Ye);_e=w(Ha,"Svelte applies diffing algorithms\ndirectly on the Browser’s DOM"),Ha.forEach(g),ea=w(Va,", using vanilla JS and human-readable HTML and CSS."),Va.forEach(g),aa=k(e),ra=m(e,"P",{});var za=y(ra);ta=w(za,"While the speed improvements are noticeable sometimes and appreciable, they were not our main\nconcern as Nuxt, and more particularly Vue was already quite efficient. But Svelte conquered us\nthrough its very elegant design, requiring code that more closely resembles native JS,\nwhich means less documentation to read, less edge cases, and simpler developer onboarding."),za.forEach(g),oa=k(e),na=m(e,"H2",{id:!0});var Ca=y(na);sa=w(Ca,"What’s next"),ia=m(Ca,"A",{href:!0});var Ua=y(ia);la=m(Ua,"SPAN",{class:!0}),y(la).forEach(g),Ua.forEach(g),Ca.forEach(g),ha=k(e),ca=m(e,"P",{});var Za=y(ca);fa=w(Za,"We’re lucky to have many projects to try many different technologies, and\nso far this year, this is what we have decided to go with. We’ll keep this article updated\nas we get more familiar with the technologies."),Za.forEach(g),pa=k(e),ua=m(e,"P",{});var Xa=y(ua);da=w(Xa,"In the meantime, you can find out more about our "),va=m(Xa,"A",{href:!0});var Ya=y(va);ma=w(Ya,"2020 Tech Stack"),Ya.forEach(g),ya=w(Xa,", which focuses on REST APIs\nand uses Nuxt.JS on the frontend."),Xa.forEach(g),this.h()},h(){S(B,"href","../our-tech-stack-2020"),S(D,"class","anchor-sign"),S(F,"href","#backend-graphql--apollo-server"),S(J,"id","backend-graphql--apollo-server"),S(H,"href","https://www.apollographql.com"),S(H,"rel","nofollow"),S(X,"href","https://graphql.org"),S(X,"rel","nofollow"),S(de,"href","https://www.apollographql.com/docs/apollo-server/"),S(de,"rel","nofollow"),S(xe,"class","anchor-sign"),S(Pe,"href","#frontend-sveltekit"),S(Ae,"id","frontend-sveltekit"),S(Ie,"href","../our-tech-stack-2020"),S(Oe,"href","https://unofficial-nuxt3-countdown.netlify.app"),S(Oe,"rel","nofollow"),S(Ke,"href","https://kit.svelte.dev"),S(Ke,"rel","nofollow"),S(He,"href","https://svelte.dev"),S(He,"rel","nofollow"),S(la,"class","anchor-sign"),S(ia,"href","#whats-next"),S(na,"id","whats-next"),S(va,"href","../our-tech-stack-2020")},m(e,u){b(e,a,u),E(a,r),E(r,t),E(a,o),E(a,n),E(n,s),E(a,i),E(a,l),E(l,h),E(a,c),E(a,f),E(f,p),E(a,A),b(e,T,u),b(e,P,u),E(P,x),b(e,G,u),b(e,R,u),E(R,N),E(N,I),E(R,L),E(R,$),E($,q),E(R,Q),E(R,B),E(B,O),b(e,W,u),b(e,J,u),E(J,j),E(J,F),E(F,D),b(e,K,u),b(e,M,u),E(M,V),E(M,H),E(H,z),E(M,C),b(e,U,u),b(e,Z,u),E(Z,X),E(X,Y),E(Z,_),b(e,ee,u),b(e,ae,u),E(ae,re),E(ae,te),E(te,oe),E(ae,ne),b(e,se,u),b(e,ie,u),E(ie,le),E(ie,he),E(he,ce),E(ie,fe),b(e,pe,u),b(e,ue,u),E(ue,de),E(de,ve),E(ue,me),E(ue,ye),E(ye,we),E(ue,ge),b(e,ke,u),b(e,Se,u),E(Se,be),b(e,Ee,u),b(e,Ae,u),E(Ae,Te),E(Ae,Pe),E(Pe,xe),b(e,Ge,u),b(e,Re,u),E(Re,Ne),E(Re,Ie),E(Ie,Le),E(Re,$e),b(e,qe,u),b(e,Qe,u),E(Qe,Be),E(Qe,Oe),E(Oe,We),E(Qe,Je),b(e,je,u),b(e,Fe,u),E(Fe,De),E(Fe,Ke),E(Ke,Me),E(Fe,Ve),E(Fe,He),E(He,ze),E(Fe,Ce),b(e,Ue,u),b(e,Ze,u),E(Ze,Xe),E(Ze,Ye),E(Ye,_e),E(Ze,ea),b(e,aa,u),b(e,ra,u),E(ra,ta),b(e,oa,u),b(e,na,u),E(na,sa),E(na,ia),E(ia,la),b(e,ha,u),b(e,ca,u),E(ca,fa),b(e,pa,u),b(e,ua,u),E(ua,da),E(ua,va),E(va,ma),E(ua,ya)},d(e){e&&g(a),e&&g(T),e&&g(P),e&&g(G),e&&g(R),e&&g(W),e&&g(J),e&&g(K),e&&g(M),e&&g(U),e&&g(Z),e&&g(ee),e&&g(ae),e&&g(se),e&&g(ie),e&&g(pe),e&&g(ue),e&&g(ke),e&&g(Se),e&&g(Ee),e&&g(Ae),e&&g(Ge),e&&g(Re),e&&g(qe),e&&g(Qe),e&&g(je),e&&g(Fe),e&&g(Ue),e&&g(Ze),e&&g(aa),e&&g(ra),e&&g(oa),e&&g(na),e&&g(ha),e&&g(ca),e&&g(pa),e&&g(ua)}}}function P(e){let a,r;const p=[e[0],x];let u={$$slots:{default:[T]},$$scope:{ctx:e}};for(let o=0;o<p.length;o+=1)u=t(u,p[o]);return a=new A({props:u}),{c(){o(a.$$.fragment)},l(e){n(a.$$.fragment,e)},m(e,t){s(a,e,t),r=!0},p(e,[r]){const t=1&r?i(p,[1&r&&l(e[0]),0&r&&l(x)]):{};2&r&&(t.$$scope={dirty:r,ctx:e}),a.$set(t)},i(e){r||(h(a.$$.fragment,e),r=!0)},o(e){c(a.$$.fragment,e),r=!1},d(e){f(a,e)}}}const x={title:"Our tech stack for 2021",dateCreated:"2021-07-06T00:00:00.000Z",description:"Through our experience building many projects in the span of a few months, we’ve completely revamped our 2020 stack to improve our efficiency at testing new ideas faster than before."};function G(e,a,r){return e.$$set=e=>{r(0,a=t(t({},a),p(e)))},[a=p(a)]}export default class extends e{constructor(e){super(),a(this,e,G,P,r,{})}}export{x as metadata};
